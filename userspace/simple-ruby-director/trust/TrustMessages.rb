
# Message for distribution of certificates
class CertificateMessage
   attr_reader :certificate

   def initialize(certificate)
       @certificate = certificate
   end      
end

# Station-to-station authentication protocol: Initial message with challenge
class STSInitialRequest
   # Public key of the node that is requesting authentication 
   attr_reader :publicKey
   # Id of resuesting node
   attr_reader :nodeId
   # Random number (X)
   attr_reader :challenge

   def initialize(publicKey, nodeId, challenge)
       @publicKey = publicKey
       @nodeId = nodeId
       @challenge = challenge
   end        
end

# Station-to-station authentication protocol: Challenge sent by "a server"
class STSServerChallenge
   # Public key of the node that is to be used as a "server" end of the connection
   attr_reader :publicKey
   # Random number generated by the server (Y)
   attr_reader :challenge
   # Signature of concatting of (Y,X)
   attr_reader :signature
   # Proof to be carried on "connect". Encrypted with the clients public key
   attr_reader :proof

   def initialize(publicKey, challenge, signature, proof)
       @publicKey = publicKey
       @challenge = challenge
       @signature = signature
       @proof = proof
   end    
end

# Station-to-station authentication protocol: "Client" sends a final message to "the server"
class STSFinalize
   # Public key of the node that is requesting authentication 
   attr_reader :publicKey   
   # Signature of concatting of (X,Y)
   attr_reader :signature
   
   def initialize(publicKey, signature)
       @publicKey = publicKey
       @signature = signature
   end
end

# Used to distribute information about public key of node
class PublicKeyDisseminationMessage
  attr_reader :nodeId
  attr_reader :publicKey
  
  def initialize(nodeId, publicKey)
     @nodeId = nodeId
     @publicKey = publicKey
  end
end