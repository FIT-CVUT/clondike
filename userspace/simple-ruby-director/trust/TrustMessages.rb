
# Message for distribution of certificates
class CertificateMessage
  attr_reader :certificate

  def initialize(certificate)
    @certificate = certificate
  end
end

# Station-to-station authentication protocol: Initial message with challenge
class STSInitialRequest
  # Public key of the node that is requesting authentication
  attr_reader :publicKeyPEM
  # Id of requesting node
  attr_reader :nodeId
  # Random number (X)
  attr_reader :challenge

  def initialize(publicKeyPEM, nodeId, challenge)
    @publicKeyPEM = publicKeyPEM
    @nodeId = nodeId
    @challenge = challenge
  end
end

# Station-to-station authentication protocol: Challenge sent by "a server"
class STSServerChallenge
  # Public key of the node that is to be used as a "server" end of the connection
  attr_reader :publicKeyPEM
  # Random number generated by the server (Y)
  attr_reader :challenge
  # Signature of concatting of (Y,X)
  attr_reader :signature
  # Proof to be carried on "connect". Encrypted with the clients public key
  attr_reader :proof

  def initialize(publicKeyPEM, challenge, signature, proof)
    @publicKeyPEM = publicKeyPEM
    @challenge = challenge
    @signature = signature
    @proof = proof
  end
end

# Station-to-station authentication protocol: "Client" sends a final message to "the server"
class STSFinalize
  # Public key of the node that is requesting authentication
  attr_reader :publicKeyPEM
  # Signature of concatting of (X,Y)
  attr_reader :signature

  def initialize(publicKeyPEM, signature)
    @publicKeyPEM = publicKeyPEM
    @signature = signature
  end
end

# Used to distribute information about public key of node
class PublicKeyDisseminationMessage
  attr_reader :nodeId
  attr_reader :publicKeyPEM
  attr_reader :sendMeYours

  def initialize(nodeId, publicKeyPEM, sendMeYours = false)
    @nodeId = nodeId
    @publicKeyPEM = publicKeyPEM
    @sendMeYours = sendMeYours
  end
end
