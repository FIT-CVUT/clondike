#! /bin/sh
### BEGIN INIT INFO
# Provides:          clondike
# Required-Start:    $network $local_fs $syslog
# Required-Stop:
# Default-Start:	 2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Run clondike cluster
### END INIT INFO

. /lib/init/vars.sh
. /lib/lsb/init-functions

PATH=/sbin:/usr/sbin:/bin:/usr/bin

LOCKFILE="/var/lock/clondike"
PIDFILE="/var/run/clondike.pid"
LOGFILE="/tmp/director.log"
DIRECTOR_LOG="/tmp/director.log"

RUBY="/usr/bin/ruby"
BASH="/bin/bash"

SRDIRECTOR_DIR="/root/clondike/userspace/simple-ruby-director"
CLONDIKE="ClondikeInit.rb" # name of Clondike in processes
CLONDIKE_START="${SRDIRECTOR_DIR}/${CLONDIKE}"


VERBOSE="yes"



lock_clondike() {
    if [ -x /usr/bin/lockfile-create ]; then
        lockfile-create "${LOCKFILE}"
        lockfile-touch "${LOCKFILE}" &
        LOCKTOUCHPID="$!"
    fi
}

unlock_clondike() {
    if [ -x /usr/bin/lockfile-create ] ; then
        kill "${LOCKTOUCHPID}"
        lockfile-remove "${LOCKFILE}"
    fi
}


chk_files() {
	if [ ! -x "${RUBY}" ] ; then
        [ "${VERBOSE}" != "no" ] && log_failure_msg "Executable '$RUBY' not find"
        exit 1
    fi
    if [ ! -r "${CLONDIKE_START}" ] ; then
        [ "${VERBOSE}" != "no" ] && log_failure_msg "Clondike start script '${CLONDIKE_START}' does not exists or is not readable"
        exit 1
    fi
}

do_start() {
    [ "${VERBOSE}" != "no" ] && log_begin_msg "Starting clondike cluster"

    # Check needed files
    chk_files


    lock_clondike
    # Critical section

    # Check if the Clondike already running
    if [ -r "${PIDFILE}" ] && [ -n "`pgrep \"${CLONDIKE}\"`" ] ; then
        log_end_msg "3"
        log_failure_msg "Clondike already running"
        unlock_clondike
        exit
    fi

    # Don't have to wait for load IP address from DHCP
    #  it manages script /etc/network/if-up.d/clondike if ethX up
    #sleep 1
    start-stop-daemon --start --make-pidfile --pidfile "${PIDFILE}" --exec "${CLONDIKE_START}" >"${LOGFILE}" 2>&1 &
    status=$?

    # End of critical section
    unlock_clondike

    [ "${VERBOSE}" != "no" ] && log_end_msg "${status}"
    return "${status}"
}

do_stop() {
    [ "$VERBOSE" != "no" ] && log_begin_msg "Stoping clondike cluster"

    lock_clondike

    start-stop-daemon --stop --quiet --pidfile "${PIDFILE}" --name "${CLONDIKE}" >/dev/null 2>&1
    #start-stop-daemon --stop --quiet --pidfile "${PIDFILE}" >/dev/null 2>&1
    status=$?

    # Disconnect and remove PID file only if success
    [ "${status}" -eq "0" ] && {

        # Delete pidfile
        rm "${PIDFILE}" >/dev/null 2>&1
    
        # Soft disconnecting
        find /clondike/*/nodes/[0-9]*/stop -exec sh -c "echo 1 > {} " \; >/dev/null 2>&1
    
        # Stop migrating processes
        #pkill make >/dev/null 2>&1
        #pkill cc1 >/dev/null 2>&1
    }

    unlock_clondike

    [ "${VERBOSE}" != "no" ] && log_end_msg "${status}"
}



case "$1" in
    start)
        do_start
        ;;
    status)
        status_of_proc -p "${PIDFILE}" "${CLONDIKE}" "Clondike" && exit 0 :: exit $?
        ;;
    restart)
        do_stop
        do_start
        ;;
    reload|force-reload)
        echo "Error: argument '$1' not supported, you can use restart" >&2
        exit 3
        ;;
    stop)
        do_stop
        ;;
    *)
        echo "Usage: $0 start|stop|restart" >&2
        exit 3
        ;;
esac


